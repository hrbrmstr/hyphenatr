// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// init
void init(std::string dict_path);
RcppExport SEXP _hyphenatr_init(SEXP dict_pathSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dict_path(dict_pathSEXP);
    init(dict_path);
    return R_NilValue;
END_RCPP
}
// cleanup
void cleanup();
RcppExport SEXP _hyphenatr_cleanup() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    cleanup();
    return R_NilValue;
END_RCPP
}
// hyphendict_is_loaded
LogicalVector hyphendict_is_loaded();
RcppExport SEXP _hyphenatr_hyphendict_is_loaded() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(hyphendict_is_loaded());
    return rcpp_result_gen;
END_RCPP
}
// hyphenate
std::vector < std::string > hyphenate(std::vector < std::string > words);
RcppExport SEXP _hyphenatr_hyphenate(SEXP wordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector < std::string > >::type words(wordsSEXP);
    rcpp_result_gen = Rcpp::wrap(hyphenate(words));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hyphenatr_init", (DL_FUNC) &_hyphenatr_init, 1},
    {"_hyphenatr_cleanup", (DL_FUNC) &_hyphenatr_cleanup, 0},
    {"_hyphenatr_hyphendict_is_loaded", (DL_FUNC) &_hyphenatr_hyphendict_is_loaded, 0},
    {"_hyphenatr_hyphenate", (DL_FUNC) &_hyphenatr_hyphenate, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_hyphenatr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
